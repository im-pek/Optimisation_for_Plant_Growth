import numpy as np
import matplotlib.pyplot as plt
import random as rand
import copy
import math as m
import random
import boto3
import datetime
from decimal import *
import decimal
import uuid
from decimal import Decimal
import statsmodels.api as sm
import pandas as pd
import statistics as s
from time import sleep, strftime

every_round_parameters=[] #should be outside the main 'def'
final_best_params=[] #should be outside the main 'def'


#PLANT MODELLING STARTS (INCLUDES LINEAR REGRESSION)

def main():
    
    dynamodb = boto3.resource('dynamodb')
    
    data = dynamodb.Table('LatestOptimisation')

    response = data.get_item(
         Key={
             'ID': 1
     }   
     )
    get_item = response['Item']
    
    latest_parameter_1_value=float(get_item.get("RecommendedDayNight", ""))
    initial_growth_score=int(get_item.get("CurrentGrowth", ""))
    
    powers=[]

    growth_score=initial_growth_score
    powers.append(growth_score)
                    
    power_3=latest_parameter_1_value**3
    powers.append(power_3)
    
    power_2=latest_parameter_1_value**2
    powers.append(power_2)

    power_1=latest_parameter_1_value
    powers.append(power_1)
    
    power_0=1
    powers.append(power_0)
    
    global every_round_parameters
    
    every_round_parameters.append(powers)
        
    print (every_round_parameters)
    
    
    df1=pd.DataFrame(every_round_parameters,columns=['g','x3','x2','x1','const'])
    print (df1)
    
    
    reg1 = sm.OLS(endog=df1['g'].astype(float), exog=df1[['x3','x2','x1','const']].astype(float), missing='drop')
    type(reg1)
    
    results = reg1.fit()
    type(results)
    
    print(results.summary())
    
    coefficients=[]
    coefficients.append(results.params[3])
    coefficients.append(results.params[2])
    coefficients.append(results.params[1])
    coefficients.append(results.params[0])
      
    all_coefficients=[]
    all_coefficients.append(coefficients)
    
    print ('Coefficients (a,b,c,d) for 1st parameter, x, in a+bx+cx^2+dx^3 format: ')
    print (coefficients)

# =============================================================================
#     print ('Coefficients (a,b,c,d) for 2nd parameter, y, in a+by+cy^2+dy^3 format: ')
#     print (permutations_list[index_min2])
# =============================================================================




#Genetic Algorithm (GA) STARTS

    ## INITIALISATION   
    def create_starting_population(size, dict):    
        #this just creates a population of different params combinations of a fixed size.
        #here we unpack the dictionary to see how long our gene needs to be, para_length is a list of the lengths of the parameter lists
        para_length = []
        for i in dict.keys():
            para_length.append(len(dict[i]))
            
        #Find out how many bits is required to encode each parameter (size of each allele) eg. [4,4]
        code_length = []
        for i in para_length:
            code_length.append(m.ceil(m.log(i,2)))    
            
        #we initalize a random population
        population = []    
        for i in range(0,size):
            population.append(create_new_member(para_length, code_length))
            
        return population, code_length, para_length
    #      
    def create_new_member(para_length, code_length):  
        #takes in a list which contains information about how long is the list for each parameter eg. [9,9]
        #returns a list of a gene, which encodes the information for each allele (parameter) into a long list eg. [0, 1, 1, 0, 1, 0, 0, 0]
        
        #generates 1 child
        member = []
        for i in range(0,len(para_length)):
            #random int between 1-length
            uncoded_rand_number = m.floor(rand.uniform(0,para_length[i]))
            #convert this number to a binary list
            member = member + encode_binary(uncoded_rand_number, code_length[i])
        
        return member
    #
    def encode_binary(number, length):
        #takes in an number to be converted (int) and the size of string (int) (eg, 3,8)
        #returns a list of converted number in binary [0, 0, 0, 0, 0, 0, 1, 1]
        binary_list = [int(x) for x in bin(number)[2:]]
        if length > len(binary_list):
            temp = [0]* (length-len(binary_list))
            binary_list = temp+binary_list
        return binary_list
        
        member.append(round(rand.uniform(0,1)))  
        return list  
    ##  
    
    ## Scoring
    
    def score_population(population, metadata):
        #scores the individual members of the population based on the fitness
        scores = []
        
        for i in range(0, len(population)):
            scores += [fitness(population[i], metadata)]
        
        return scores
        
    def fitness(member, metadata):
        #Decode the gene and run parameters into model to get score
        #Debug line: #print("Parsing Member: {}".format(member))
        score = 0
        values = []
        
        #Unpack Metadata
        code_length = metadata[0]
        para_length = metadata[1]
        dict = metadata[2]
        dict_keys = metadata[3]
        
        #Decode Gene to the numbers here 
        values,errorflag = decode(dict, dict_keys, code_length, member)
        
        if errorflag == 0:
            #Calculate score here
            score = model(member, code_length, values)
    
        return score
        
    def decode(dict, dict_keys, code_length, member):
        #Takes in dict, dict_keys, code length and list of binary, returns respective values from dictionary
        #(eg. gene [0, 1, 0, 1, 0, 1, 1, 1] with code_length [4,4] -> [5, 7])
        #(eg. gene [0, 1, 0, 1, 0, 1, 1, 1] with code_length [3,4,1] -> [2, 11, 1])
        start_pointer = 0
        list_of_decoded_numbers = []
        values = []
        errorflag = 1
        
        for i in code_length:
            #iterate through the alleles
            binary_to_be_decoded=[] #temp array to store allele information
            for j in range(start_pointer,start_pointer+i):
                #add number into temp array
                binary_to_be_decoded.append(member[j])
            #change start position (for next allele to be read)
            start_pointer = start_pointer+i
            #Convert "binary_to_be_decoded" into a string and then make the binary to decimal conversion
            list_of_decoded_numbers.append(int("".join(map(str,binary_to_be_decoded)), base=2))
        
        #Check if number of parameters match the lists stored in the dictionary
        if len(dict_keys) != len(list_of_decoded_numbers):
            print("!!! \n ************************ WARNING ************************ \n Parameter number mismatch! \n Parsing {} parameters but dictionary only has {} lists \n!!!".format(len(list_of_decoded_numbers),dict.keys()))
        
        else:
            #Extract values from parameter list
            for i in range(0,len(list_of_decoded_numbers)):
                try:
                    values.append(dict[dict_keys[i]][list_of_decoded_numbers[i]]) 
                    errorflag = 0
                except:
                    #print("Child's Parameters exceeded defined range, culling sample.")
                    errorflag = 2
            
            
        return values, errorflag
    #
    # 
    def pick_mate(scores):
        #not sure what this does, probably pick a good mate or something?
        #refer to here: https://github.com/gmichaelson/GA_in_python/blob/master/GA%20example.ipynb
        array = np.array(scores)
        temp = array.argsort()
        ranks = np.empty_like(temp)
        ranks[temp] = np.arange(len(array))
    
        fitness = [len(ranks) - x for x in ranks]
        
        cum_scores = copy.deepcopy(fitness)
        
        for i in range(1,len(cum_scores)):
            cum_scores[i] = fitness[i] + cum_scores[i-1]
            
        probs = [x / cum_scores[-1] for x in cum_scores]
        
        randomnum = rand.random()
        
        for i in range(0, len(probs)):
            if randomnum < probs[i]:
                
                return i
    #
    #
    def crossover(a,b):
        
        if len(a) != len(b):
            print("!!! \n ************************ WARNING ************************ \n Mating Partner mismatch! Length of partners are different! \n Attempted to mate {} with {} \n!!!".format(a,b))
            return a,b
        
        new_a = []
        new_b = []
        cut = m.floor(rand.uniform(0,len(a))) #crossover point
        
        new_a1 = copy.deepcopy(a[0:cut])
        new_a2 = copy.deepcopy(b[cut:])
        
        new_b1 = copy.deepcopy(b[0:cut])
        new_b2 = copy.deepcopy(a[cut:])
        
        new_a = new_a1 + new_a2
        new_b = new_b1 + new_b2
        
        if len(new_a) != len(new_b):
            print("!!! \n ************************ WARNING ************************ \n Children length mismatch! Length of Children are different! \n Children {} and {} \n!!!".format(new_a,new_b))
            return a,b
           
        return new_a, new_b
    #
    #   
    def mutate (member, probability):
        output = copy.deepcopy(member)
        for i in range(0,len(member)):
            if rand.random() < probability:
                output[i] = int(member[i] == 0)
        return output
    #
    #    
        
    def RunGA(list, dict, number_of_iteration):
        population_size = 30
        number_of_couples = 9
        number_of_winners_to_keep = 2
        mutation_probability = 0.05
        number_of_groups = 1
        best_growth_score_GA=0

        
        best_growth_params = ['0000000000'] #'000000000' SYMBOLISES 'OUT OF PRE-STIPULATED RANGE'; A NEW RANDOM POINT WILL BE SAMPLED.
        # create the starting population
        population, code_length, para_length = create_starting_population(population_size, dict)
        
        metadata = (code_length, para_length, dict, list)
     
        # run the iterations
        plots=[]
        for i in range(0,number_of_iterations):
            new_population = []
            
            # evaluate the fitness of the current population
            scores = score_population(population, metadata)
            best_member = population[np.argmax(scores)] #best member of the population
            growth_score = max(scores) #best score
#            print (best_growth_score_GA)            
            if growth_score > best_growth_score_GA:
                best_growth_score_GA = growth_score
                best_growth_params, errorflag = decode(dict, list, code_length, best_member)
            print('Iteration {}: Best growth so far is {}. Using {} of {}'.format(i, best_growth_score_GA, best_growth_params,list))
    
            
            # allow members of the population to breed based on their relative score; 
                # i.e., if their score is higher they're more likely to breed
            for j in range(0, number_of_couples):  
                new_1, new_2 = crossover(population[pick_mate(scores)], population[pick_mate(scores)])
                new_population = new_population + [new_1, new_2]
      
            # mutate (maybe problem with deepcopy?)
            for j in range(0, len(new_population)):
                new_population[j] = copy.deepcopy(mutate(new_population[j], 0.05))
            
             
            # keep members of previous generation
            new_population += [population[np.argmax(scores)]]
            for j in range(1, number_of_winners_to_keep):
                keeper = pick_mate(scores)            
                new_population += [population[keeper]]
                
            # add new random members
            while len(new_population) < population_size:
                new_population += [create_new_member(para_length,code_length)]
            #replace the old population with a real copy
            population = copy.deepcopy(new_population)
            plots.append(best_growth_score_GA)
            
            
        print("\n \n ************************************\n GA is Finished.")
        print("Growth Score of {}\n With Parameters {} from {}".format(best_growth_score_GA, best_growth_params, list))
         
        best_growth_params_1=best_growth_params[0]
        
        plt.plot(plots)
        plt.show()
        
        table = dynamodb.Table('LatestOptimisation')
        table2 = dynamodb.Table('OptimisationHistory')
        
        print(table.creation_date_time)
                
        
        d = datetime.datetime.utcnow()
        epoch = datetime.datetime(1970,1,1)
        t = (d - epoch).total_seconds()
    
    
        table.update_item(
        Key={
            'ID': 1
        },
        UpdateExpression='SET RecommendedDayNight = :val1',
        ExpressionAttributeValues={
            ':val1': str(best_growth_params_1)
        })
        
        table.update_item(
        Key={
            'ID': 1
        },
        UpdateExpression='SET CurrentGrowth = :val1',
        ExpressionAttributeValues={
            ':val1': 13500 #GROWTH VALUE HERE; Normalise to scale of 0% - 100%.
        })
        
        table.update_item(
         Key={
            'ID': 1
        },
        UpdateExpression='SET RecommendedIntensity = :val1',
        ExpressionAttributeValues={
            ':val1': 100 #IF CHOOSE TO OPTIMISE THIS, USE: round(best_growth_params_2, 2),
        })    
        
        table.update_item(
         Key={
            'ID': 1
        },
        UpdateExpression='SET EpochTime = :val1',
        ExpressionAttributeValues={
            ':val1': Decimal(t)
        })    
    
        table.update_item(
         Key={
            'ID': 1
        },
        UpdateExpression='SET RecipeUUID = :val1',
        ExpressionAttributeValues={
            ':val1': str(uuid.uuid4())
        })    
        
        #print (best_growth_params)
        
        
        table2.put_item(
           Item={
                'EpochTime': Decimal(t),
                'RecipeUUID': str(uuid.uuid4()),
                'RecommendedDayNight': str(best_growth_params_1),
                'RecommendedIntensity': 100, #IF CHOOSE TO OPTIMISE THIS, USE: round(best_growth_params_2, 2),
                'CurrentGrowth': 'to be calibrated' #GROWTH VALUE HERE; 28 is the max. Normalise to scale of 0% - 100%.
            })

        global final_best_params
        
        final_best_params.append(best_growth_params_1)
        
        return True
        
        
    
    #######################   BELOW HERE SITS GROWTH MODEL, WHICH CAN BE EDITED   ####################### 
    #coefficients=[(1,2,7,9),(3,2,2,7)]
    scored=[]

    def model(member, code_length, values):
        #takes in a list of values for parameters and returns the score (expected growth score)
        
        #Change this number to reflect no. of parameters the model requires
        expected_parameters = 2
        score = 0
        
        if(len(values) < expected_parameters):
            return score
        
        #Check if okay to parse to model
        if expected_parameters != len(values):
            print("!!! \n ************************ WARNING ************************ \n Member {} has more values than input model. \n Model has {} variables while gene has {}. \n Check the code_length input, the current code_length is {} \n Values are {}. \n!!!".format(member,expected_parameters,len(values),code_length,values))
           
        else:
            #Model changes here
            a_number=0
            while a_number<=len(all_coefficients):
                for ix,coefficient in enumerate(all_coefficients):
                    for idx,alphabet in enumerate(values):
                        scores = all_coefficients[ix][0] + all_coefficients[ix][1]*values[idx] + all_coefficients[ix][2]*values[idx]**2 + all_coefficients[ix][3]*values[idx]**3
                        scored.append(scores)
                a_number += 1
        score=sum(scored)
        return score

    ##########################################################################
    
    def seq(start, stop, step=1):
        n = int(round((stop - start)/float(step)))
        if n > 1:
            return([start + step*i for i in range(n+1)])
        elif n == 1:
            return([start])
        else:
            return([])
    

    number_of_iterations = 100
    parameters_list = ['RecommendedDayNight','RecommendedIntensity']  #List of parameter names
    parameters_dict = {'RecommendedDayNight':list(seq(0, 24, 0.25)), 'RecommendedIntensity':list(seq(0, 255, 1))} #Dictionary containing the (min/max) #add one more comma within 'seq' for intervals    
    RunGA(parameters_list, parameters_dict, number_of_iterations) 


    print (every_round_parameters)
    
    global final_best_params
    
#    print (round(Decimal(latest_parameter_1_value), 2))
    
#THIS PORTION AUTOMATICALLY EXITS CODE IF PREVIOUS RECOMMENDED PARAMETER EXACTLY THE SAME AS NEW RECOMMENDED PARAMETER (OPTIMAL VALUE REACHED)
    if final_best_params[-1] == round(Decimal(latest_parameter_1_value), 2):
        exit()

#THIS PORTION IS FOR IMMEDIATE AUTO-RE-RUNS
    else: #CAN ADD TIMER WITHIN FOR TIMED CONSTANT AUTO RE-RUNS
        sleep(0.000001) #FREQUENCY OF RE-OPTIMISATION, IN SECONDS
        main()
        
# =============================================================================
# #THIS PORTION IS FOR MANUAL RE-RUNS
# #    else:
#     restart=input('Do you wish to start again?')
#     if restart=='yes': #TYPE 'yes' is response window to initiate restart
#          main()
# =============================================================================

main()
